#include <stdio.h>

int main() {
    int a[10][10], b[10][10],s1[10][3], s2[10][3], result[10][3], t[10][3], r1, c1, r2, c2, count1 = 0, count2 = 0,ch, x;
    printf("Enter number of rows of matrix one: ");
    scanf("%d", &r1);
    printf("Enter number of column of matrix one: ");
    scanf("%d", &c1);
    printf("Enter the elements of the matrix one:\n");
    for (int i = 0; i < r1; i++) {
        for (int j = 0; j < c1; j++) {
            scanf("%d", &a[i][j]);
        }
    }

    for (int i = 0; i < r1; i++) {
        for (int j = 0; j < c1; j++) {
            if (a[i][j] != 0) {
                count1++;
                s1[count1][0] = i;
                s1[count1][1] = j;
                s1[count1][2] = a[i][j];
            }
        }
    }
    s1[0][0] = r1;
    s1[0][1] = c1;
    s1[0][2] = count1;


    printf("Enter number of rows of matrix two: ");
    scanf("%d", &r2);
    printf("Enter number of column of matrix two: ");
    scanf("%d", &c2);
    printf("Enter the elements of the matrix two:\n");
    for (int i = 0; i < r2; i++) {
        for (int j = 0; j < c2; j++) {
            scanf("%d", &b[i][j]);
        }
    }

    for (int i = 0; i < r2; i++) {
        for (int j = 0; j < c2; j++) {
            if (b[i][j] != 0) {
                count2++;
                s2[count2][0] = i;
                s2[count2][1] = j;
                s2[count2][2] = b[i][j];
            }
        }
    }
    s2[0][0] = r2;
    s2[0][1] = c2;
    s2[0][2] = count2;
   
    printf("\nSparse Matrix one:\n");
    for (int i = 0; i <= count1; i++) {
        printf("%d\t%d\t%d\n", s1[i][0], s1[i][1], s1[i][2]);
    }
   
    printf("\nSparse Matrix two:\n");
    for (int i = 0; i <= count2; i++) {
        printf("%d\t%d\t%d\n", s2[i][0], s2[i][1], s2[i][2]);
    }

    do {
        printf("\nMENU DRIVEN\n1. Addition\n2. Transpose\n3. Exit\nEnter your choice: \n");
        scanf("%d", &ch);

        switch (ch) {
            case 1: {
                if (s1[0][0] == s2[0][0] && s1[0][1] == s2[0][1]) {
                    int i = 1, j = 1, k = 1;
                    while (i <= count1 && j <= count2) {
                        if (s1[i][0] < s2[j][0] || (s1[i][0] == s2[j][0] && s1[i][1] < s2[j][1])) {
                            result[k][0] = s1[i][0];
                            result[k][1] = s1[i][1];
                            result[k][2] = s1[i][2];
                            i++;
                        } else if (s1[i][0] > s2[j][0] || (s1[i][0] == s2[j][0] && s1[i][1] > s2[j][1])) {
                            result[k][0] = s2[j][0];
                            result[k][1] = s2[j][1];
                            result[k][2] = s2[j][2];
                            j++;
                        } else {
                            result[k][0] = s1[i][0];
                            result[k][1] = s1[i][1];
                            result[k][2] = s1[i][2] + s2[j][2];
                            i++;
                            j++;
                        }
                        k++;
                    }
                    while (i <= count1) {
                        result[k][0] = s1[i][0];
                        result[k][1] = s1[i][1];
                        result[k][2] = s1[i][2];
                        i++;
                        k++;
                    }
                    while (j <= count2) {
                        result[k][0] = s2[j][0];
                        result[k][1] = s2[j][1];
                        result[k][2] = s2[j][2];
                        j++;
                        k++;
                    }
                    result[0][0] = s1[0][0];
                    result[0][1] = s1[0][1];
                    result[0][2] = k - 1;
                    printf("Resultant Sparse Matrix after Addition:\n");
                    for (int i = 0; i < k; i++) {
                        printf("%d\t%d\t%d\n", result[i][0], result[i][1], result[i][2]);
                    }
                } else {
                    printf("Addition not possible.\n");
                }
                break;
            }
            case 2: {
                printf("Do you want the transpose of Matrix A or Matrix B?\n1. A\n2. B: \n");
                scanf("%d", &x);
                if (x == 1) {
                    int k = 1;
                    for (int i = 0; i < c1; i++) {
                        for (int j = 1; j <= count1; j++) {
                            if (s1[j][1] == i) {
                                t[k][0] = s1[j][1];
                                t[k][1] = s1[j][0];
                                t[k][2] = s1[j][2];
                                k++;
                            }
                        }
                    }
                    t[0][0] = c1;
                    t[0][1] = r1;
                    t[0][2] = k - 1;
                    printf("Transpose of Matrix A:\n");
                    for (int i = 0; i < k; i++) {
                        printf("%d\t%d\t%d\n", t[i][0], t[i][1], t[i][2]);
                    }
                } else if (x == 2) {
                    int k = 1;
                    for (int i = 0; i < c2; i++) {
                        for (int j = 1; j <= count2; j++) {
                            if (s2[j][1] == i) {
                                t[k][0] = s2[j][1];
                                t[k][1] = s2[j][0];
                                t[k][2] = s2[j][2];
                                k++;
                            }
                        }
                    }
                    t[0][0] = c2;
                    t[0][1] = r2;
                    t[0][2] = k - 1;
                    printf("Transpose of Matrix B:\n");
                    for (int i = 0; i < k; i++) {
                        printf("%d\t%d\t%d\n", t[i][0], t[i][1], t[i][2]);
                    }
                } else {
                    printf("Invalid entry\n");
                }
                break;
            }
            case 3:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (ch != 3);

    return 0;
}
